// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int pow2;

        let i = 0;
        let pow2 = 1;
        let twoToThe = Array.new(16);

        //fill twoToThe with powers of 2
        while (i < 16) {
            let twoToThe[i] = pow2;
            let pow2 = pow2 + pow2;
            let i = i + 1;
        }

        return;

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            //if jth bit of y is 1
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        return sum;
    }

    //by anding with a power of 2, the and is true if x's jth bit is 1
    function boolean bit(int x, int j) {
        return x & twoToThe[j];
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        //easier to divide with absolute values
        var int absX;
        var int absY;
        var int result;

        // to return the right sign
        var boolean negativeX;
        var boolean negativeY;

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let negativeX = x < 0;
        let negativeY = y < 0;

        // error check
        if (y = 0) {
            do Sys.error(3);
        }
        if (absY > absX) {
            return 0;
        }

        //algo from book
        let q = Math.divide(absX, absY + absY);

        if ((absX - (2 * q * absY)) < absY) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        //return correct sign
        if (negativeY = negativeX) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        //i didnt use the books algorithm b/c i couldnt get it to work
        var int j;
        var int res;
        var int app;
        var int appSquared;

        //error check
        if (x < 0) {
            do Sys.error(4);
        }

        let res = 0;
        //# bits / 2 - 1
        let j = 16 / 2 - 1;

        // while j >= 0
        while (~(j < 0)) {
            let app = res + twoToThe[j];
            let appSquared = app * app;
            //appSquared <= x and overflow check
            if (~(appSquared > x) & (appSquared > 0)) {
                let res = app;
            }
            let j = j - 1;
        }
        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
