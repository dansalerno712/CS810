// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    // a string is just an array of characters
    field Array buf;
    field int bufLength;
    field int stringLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        // a 0 length string needs to be supported, but arrays need at least 1
        // so make a dummy 1 length string
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let buf = Array.new(maxLength);
        let bufLength = maxLength;
        let stringLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(buf);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > stringLength) {
            do Sys.error(15);
        }
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > stringLength) {
            do Sys.error(15);
        }
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        //make sure you're not overflowing
        if (~(stringLength > bufLength)) {
            let buf[stringLength] = c;
            let stringLength = stringLength + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (stringLength = 0) {
            do Sys.error(18);
            return;
        } else {
            let stringLength = stringLength - 1;
            return;
        }
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int n;
        var int i;
        var boolean negative;

        // check if there is a negative sign
        if ((stringLength > 0) & (buf[0] = 45)) {
            let negative = true;
            let i = 1;
        } else {
            let negative = false;
            let i = 0;
        }

        // loop until end of string or you see a non-digit
        while((i < stringLength) & String.isDigit(buf[i])) {
            // buf - 48 gets the digit value
            let n = (n * 10) + (buf[i] - 48);
            let i = i + 1;
        }

        if (negative) {
            return -n;
        } else {
            return n;
        }
    }

    function boolean isDigit(char c) {
        //checks if c is between 48
        return ~(c < 48) & ~(c > 57);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        //reset the string length
        var int length;
        //holds length of int as string
        let stringLength = 0;
        if (val < 0) {
            let val = -val;
            //append a -
            do appendChar(45);
            let length = 1;
        } else {
            let length = 0;
        }

        //get length of int and dont overwrite - if it is there
        let length = length + String.getIntLength(val);

        //error check
        if (length > bufLength) {
            do Sys.error(19);
        }

        //recusive string appending 
        do toString(val);
        //keep string length updated
        let stringLength = length;
        return;
    }

    function int getIntLength(int i) {
        var int count;

        let count = 0;

        //count how many divides are needed to 0 the int
        while (i > 0) {
            let i = i / 10;
            let count = count + 1;
        }

        return count;
    }
    function char toChar(int i) {
        return i + 48;
    }

    method void toString(int val) {
        var int q;
        var int mod;
        var char c;

        //get mod and quotient
        let q = val / 10;
        let mod = val - (q * 10);
        //set c to int
        let c = String.toChar(mod);

        //if val < 10, we are done
        if (val < 10) {
            //error check
            do appendChar(c);
        } else {
            //we need to divide more so call again
            do toString(q);
            //append c
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
