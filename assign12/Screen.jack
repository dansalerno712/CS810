// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static boolean white;
    static boolean black;
    static int screenIndex;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int pow2;

        let i = 0;
        let pow2 = 1;
        let twoToThe = Array.new(16);

        //fill twoToThe with powers of 2
        while (i < 16) {
            let twoToThe[i] = pow2;
            let pow2 = pow2 + pow2;
            let i = i + 1;
        }

        let white = false;
        let black = true;
        let color = black;
        let screenIndex = 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        //go over every screen pixel
        while (i < 8192) {
            do Memory.poke(screenIndex + i, white);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int pixel;
        var int bit;
        var int x16;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7);
        }

        let x16 = x / 16;
        let bit = x - (x16 * 16);
        let address = screenIndex + ((y * 32) + x16);
        let pixel = Memory.peek(address);

        if (color) {
            let pixel = twoToThe[bit] | pixel;
        } else {
            let pixel = twoToThe[bit] & ~pixel;
        }
        do Memory.poke(address, pixel);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int adyMinusbdx, a, b, dx, dy, ybase, yend, xbase, xend, temp;
        let a = 0;
        let b = 0;

        let adyMinusbdx = 0;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            let ybase = Math.min(y1, y2);
            let yend = Math.max(y1, y2);

            while(~(ybase > yend)) {
                do Screen.drawPixel(x1, ybase);
                let ybase = ybase + 1;
            }
        }

        if (dy = 0) {
            let xbase = Math.min(x1, x2);
            let xend = Math.max(x1, x2);

            while(~(xbase > xend)) {
                do Screen.drawPixel(xbase, y1);
                let xbase = xbase + 1;
            }
        }

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
